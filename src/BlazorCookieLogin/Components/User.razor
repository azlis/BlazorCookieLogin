@using BlazorCookieLogin.Entity;
<Table TItem="TestUser"
       IsBordered="true"
       ShowAddButton="true"
       ShowToolbar="true"
       IsMultipleSelect="true"
       ShowExtendButtons="true"
       ShowEditButtonCallback="entity => entity.Id != 1"
       ShowDeleteButtonCallback="entity => entity.Id != 1"
       OnQueryAsync="OnQueryAsync"
       OnSaveAsync="OnSaveAsync"
       OnDeleteAsync="OnDeleteAsync">
    <TableColumns>
        <TableColumn @bind-Field="@context.UserName"></TableColumn>
        <TableColumn @bind-Field="@context.Name"></TableColumn>
        <TableColumn @bind-Field="@context.RoleId" Lookup="Roles"></TableColumn>
    </TableColumns>
    <EditTemplate>
        <div class="row g-3 form-inline">
            <div class="col-12 col-sm-6">
                <BootstrapInput @bind-Value="@context.UserName" placeholder="用户名" maxlength="50" />
            </div>
            <div class="col-12 col-sm-6">
                <BootstrapInput @bind-Value="@context.RoleId" placeholder="用户组" maxlength="50" />
            </div>
            <div class="col-12 col-sm-6">
                <BootstrapInput @bind-Value="@context.Name" placeholder="用户姓名" maxlength="50" />
            </div>
            <div class="col-12 col-sm-6">
                <BootstrapPassword @bind-Value="@context.Password" placeholder="用户密码" maxlength="50" />
            </div>
        </div>
    </EditTemplate>
    <RowButtonTemplate>
        <TableCellButton Color="Color.Success" Icon="fa fa-edit" Text="重置密码" OnClickWithoutRender="() => ShowModal(context)"></TableCellButton>
    </RowButtonTemplate>
</Table>

<Modal @ref="PasswordModal">
    <ModalDialog Title="重置密码">
        <BodyTemplate>
            <BootstrapInput @bind-Value="SelectedUser.Password" DisplayText="请输入新密码"></BootstrapInput>
        </BodyTemplate>
        <FooterTemplate>
            <Button OnClick="ResetPassword">重置密码</Button>
        </FooterTemplate>
    </ModalDialog>
</Modal>

@code {

    private List<SelectedItem>? Roles { get; set; }

    private Modal? PasswordModal { get; set; }

    private TestUser SelectedUser { get; set; } = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Roles = TestRole.Select.ToList().Select(x => new SelectedItem(x.Id.ToString(), x.Name!)).ToList();
    }

    private Task<QueryData<TestUser>> OnQueryAsync(QueryPageOptions arg)
    {
        var users = TestUser.Select.Count(out var count)
            .Page(arg.PageIndex, arg.PageItems).ToList();
        return Task.FromResult(new QueryData<TestUser>
        {
            Items = users,
            TotalCount = (int)count
        });
    }

    private Task<bool> OnSaveAsync(TestUser arg1, ItemChangedType arg2)
    {
        if (arg2 == ItemChangedType.Add)
        {
            arg1.Password = arg1.Password;
        }
        arg1.Save();
        return Task.FromResult(true);
    }

    private void ResetPassword()
    {
        if (SelectedUser is not null)
        {
            SelectedUser.Password = SelectedUser.Password;
            SelectedUser?.Save();
            PasswordModal?.Toggle();
        }
    }

    private Task ShowModal(TestUser TestUser)
    {
        SelectedUser = TestUser;
        SelectedUser.Password = "";
        PasswordModal?.Toggle();
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task<bool> OnDeleteAsync(IEnumerable<TestUser> arg)
    {
        foreach (var item in arg)
        {
            item.Delete();
        }
        return Task.FromResult(true);
    }
}